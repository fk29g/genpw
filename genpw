#!/usr/bin/env bash
# genpw - minimal password generator
# Copyright (C) 2025  fk29g
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

set -e

PROGRAM="${0##*/}"
PLATFORM="$XDG_SESSION_TYPE"

print_help() {
    echo "Usage: $PROGRAM [-s] [-n] [-c] [length]"
    echo ""
    echo "Flags:"
    echo "  -s  include at least one special character"
    echo "  -n  include at least one number"
    echo "  -c  copy to clipboard"
    echo "  -h  print help"
    echo ""
    echo "Arguments:"
    echo "  length - length in digits"
}

password=""
pw_length=15
tr_chars="a-zA-Z"
num_chars="0-9"
num_chars_regex="[0-9]"
special_chars="\\\\_\-@$%=!?.,;:#\"\'<>(){}[]&|\/^~"
special_chars_regex="[]\\_\-\@$%=!?.,;:#\"\'<>(){}\[&|/\^~]"

generate() {
    password=$(tr -cd $tr_chars < /dev/urandom | head -c $pw_length)
}

sflag=false
nflag=false
cflag=false

while getopts ":hsnc" flag; do
    case "${flag}" in
        h)
            print_help
            exit 0
            ;;
        s)
            sflag=true
            tr_chars+="$special_chars"
            ;;
        n)
            nflag=true
            tr_chars+="$num_chars"
            ;;
        c)
            cflag=true
            ;;
        \?)
            echo "Invalid flag: -$OPTARG"
            exit 1
            ;;
    esac
done

shift $((OPTIND - 1))

if [[ $# -gt 1 ]]; then
    echo "Too many arguments." >&2
    exit 1
fi

if [[ -n $1 ]]; then
    if [[ $1 =~ ^[0-9]+$ && $1 -gt 0 ]]; then
        pw_length="$1"
    else
        echo "Invalid length: $1" >&2
        exit 1
    fi
fi

generate

if [[ $pw_length -gt 2 ]]; then
    if $sflag && $nflag; then
        while ! [[ "$password" =~ $special_chars_regex && "$password" =~ $num_chars_regex ]]; do
            generate
        done
    fi

    if $sflag && ! $nflag; then
        while ! [[ "$password" =~ $special_chars_regex ]]; do
            generate
        done
    fi

    if ! $sflag && $nflag; then
        while ! [[ "$password" =~ $num_chars_regex ]]; do
            generate
        done
    fi
fi

if $cflag; then
    case "$PLATFORM" in
        "wayland")
            if [[ -n $(command -v wl-copy) ]]; then
                wl-copy "$password"
                echo "Password copied to clipboard."
                echo "Clearing in 60 seconds."
                $(sleep 60; wl-copy --clear) &
            else
                echo "Unable to copy to clipboard. Is wl-clipboard installed?" >&2
                exit 1
            fi
            ;;
        "x11")
            if [[ -n $(command -v xclip) ]]; then
                echo -n "$password" | xclip -selection clipboard
                echo "Password copied to clipboard."
                echo "Clearing in 60 seconds."
                $(sleep 60; echo -n "" | xclip -selection clipboard) &
            else
                echo "Unable to copy to clipboard. Is xclip installed?" >&2
                exit 1
            fi
            ;;
        *)
            echo "Unable to copy to clipboard." >&2
            echo "Session type (X11/Wayland) couldn't be determined." >&2
            echo "Check if XDG_SESSION_TYPE is correctly set." >&2
            exit 1
            ;;
    esac
    exit 0
fi

echo "${password}"
exit 0
